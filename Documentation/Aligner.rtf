{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f36\froman\fcharset238\fprq2 Times New Roman CE;}{\f37\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f39\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f40\froman\fcharset162\fprq2 Times New Roman Tur;}{\f41\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f42\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f43\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f44\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f56\fmodern\fcharset238\fprq1 Courier New CE;}{\f57\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f59\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f60\fmodern\fcharset162\fprq1 Courier New Tur;}{\f61\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f62\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f63\fmodern\fcharset186\fprq1 Courier New Baltic;}
{\f64\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs24\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\trcbpat1\trcfpat1\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 
\f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 \styrsid10582236 Plain Text;}}{\*\rsidtbl \rsid4531994\rsid4539346\rsid7419342\rsid8720946\rsid9121860\rsid9510884\rsid10100269\rsid10552690\rsid10582236\rsid11746446
\rsid12600253\rsid14223892\rsid14762161\rsid15941723}{\*\generator Microsoft Word 10.0.2627;}{\info{\title The Aligner toolkit offers a versatile dynamic programming algorithm, from which specific aligning implementations are readily}{\author The Man}
{\operator The Man}{\creatim\yr2007\mo3\dy26\hr20\min39}{\revtim\yr2007\mo3\dy26\hr20\min39}{\version2}{\edmins1}{\nofpages2}{\nofwords790}{\nofchars4506}{\*\company Fraternity of Dudes}{\nofcharsws5286}{\vern16437}}\margl1319\margr1319 
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\formshade\horzdoc\dgmargin\dghspace180\dgvspace180\dghorigin1319\dgvorigin1440\dghshow1\dgvshow1
\jexpand\viewkind1\viewscale100\viewzk2\pgbrdrhead\pgbrdrfoot\splytwnine\ftnlytwnine\htmautsp\nolnhtadjtbl\useltbaln\alntblind\lytcalctblwd\lyttblrtgr\lnbrkrule\nobrkwrptbl\snaptogridincell\allowfieldendsel\wrppunct\asianbrkrule\rsidroot10100269 \fet0
\sectd \linex0\endnhere\sectlinegrid360\sectdefaultcl\sectrsid10582236\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang 
{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7
\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain 
\s15\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0\pararsid10582236 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\insrsid11746446 Aligner Documentation
\par 
\par }{\insrsid7419342\charrsid10582236 The Aligner toolkit offers a versatile dynamic programming algorithm, from which specific aligning implementations }{\insrsid9121860 are readily}{\insrsid7419342\charrsid10582236  produced. The base}{\insrsid9121860 
 class, called Aligner, }{\insrsid7419342\charrsid10582236 contains a dynamic programming algorithm that can be run in global, semi-global, or local modes. The class has two functions, }{\insrsid9121860 
\par 
\par }{\b\insrsid7419342\charrsid9121860 add_target(}{\b\i\insrsid9121860\charrsid9121860 protein}{\b\insrsid7419342\charrsid9121860 ) }{\b\insrsid9121860\charrsid9121860 
\par }{\insrsid9121860 
\par }{\insrsid7419342\charrsid10582236 and }{\insrsid9121860 
\par 
\par }{\b\insrsid7419342\charrsid9121860 add_template(}{\b\i\insrsid9121860\charrsid9121860 protein}{\b\insrsid7419342\charrsid9121860 )}{\insrsid7419342\charrsid10582236 , }{\insrsid9121860 
\par 
\par }{\insrsid7419342\charrsid10582236 which take }{\insrsid9121860 as arguments }{\insrsid7419342\charrsid10582236 protein objects}{\insrsid9121860  loaded by a MolecularSystem object}{\insrsid7419342\charrsid10582236 . }{\insrsid9121860 
If only sequence information is available, 
\par 
\par }{\b\insrsid7419342\charrsid9121860 add_target_sequence(}{\b\i\insrsid9121860\charrsid9121860 char_array/string}{\b\insrsid7419342\charrsid9121860 )}{\insrsid7419342\charrsid10582236  }{\insrsid9121860 
\par 
\par }{\insrsid7419342\charrsid10582236 and }{\insrsid9121860 
\par 
\par }{\b\insrsid7419342\charrsid9121860 add_template_sequence(}{\b\i\insrsid9121860\charrsid9121860 char_array/string}{\b\insrsid7419342\charrsid9121860 ) }{\b\insrsid9121860 
\par }{\b\insrsid9121860\charrsid9121860 
\par }{\insrsid9121860 are used, }{\insrsid7419342\charrsid10582236 each of which take a list of characters or a character string as input. This base class returns a pair of equivalent-length character lists containing the single-letter-residue names }{
\insrsid9121860 and}{\insrsid7419342\charrsid10582236  hyphens (-)}{\insrsid9121860 , which represent}{\insrsid7419342\charrsid10582236  the alignment\rquote s optimally placed gaps. The Aligner class is initiated }{\insrsid9121860 like so:
\par 
\par }{\b\insrsid9121860\charrsid4539346 Aligner.Aligner.__init__( }{\b\insrsid4531994 1}{\b\i\insrsid9121860\charrsid11746446 ,}{\b\i\insrsid4531994  }{\b\i\insrsid4539346\charrsid11746446 \'94}{\b\i\insrsid4531994 local}{\b\i\insrsid4539346\charrsid11746446 
\'94}{\b\i\insrsid9121860\charrsid11746446 ,}{\b\insrsid9121860\charrsid4539346  }{\b\i\insrsid8720946\charrsid11746446 [0.8,0.5]}{\b\insrsid9121860\charrsid4539346 )
\par }{\insrsid9121860\charrsid9121860 
\par }{\insrsid7419342\charrsid10582236 with a 0/1 text-output toggle parameter, an alignment-mode parameter (\'93local\'94, \'93semilocal\'94, and \'93global\'94
, representing Needleman-Wunsch, Semiglobal, and Smith-Waterman type algorithms), and a list of two gap values (}{\insrsid9121860 a }{\insrsid7419342\charrsid10582236 gap-start and }{\insrsid9121860 a gap-extention}{\insrsid7419342\charrsid10582236 
 penalt}{\insrsid9121860 y}{\insrsid7419342\charrsid10582236 ).
\par 
\par }{\insrsid4531994 Objects are not made by calling the Aligner class}{\insrsid7419342\charrsid10582236  directly. }{\insrsid4531994 T}{\insrsid7419342\charrsid10582236 hree }{\insrsid4531994 practical}{\insrsid7419342\charrsid10582236  class
es have been written that }{\insrsid4531994 instead }{\insrsid7419342\charrsid10582236 inherit }{\insrsid4531994 and apply }{\insrsid7419342\charrsid10582236 this base-class functionality}{\insrsid4531994 :}{\insrsid7419342\charrsid10582236 
 SequenceAligner, SequenceBasedStructureAligner, and StructureAligner. Class SequenceAligner uses the PET91 scoring matrix to align the residues, and reports the percent identity between the aligned sequences. Class SequenceBasedStructureAligner }{
\insrsid4531994 produces the same alignment, then }{\insrsid7419342\charrsid10582236 superimposes the alpha carbon atoms of any non-gap pairs returned in the alignment}{\insrsid4531994 . It then}{\insrsid7419342\charrsid10582236 
 reports the best-fit rms of the}{\insrsid4531994 se }{\insrsid7419342\charrsid10582236 equivalent pairs. The last class, StructureAligner, is distinct from the first two in that it uses structural features (rms and shielding}{\insrsid4531994 )}{
\insrsid10552690  instead of amino acid types to}{\insrsid7419342\charrsid10582236  }{\insrsid4531994 scor}{\insrsid10552690 e}{\insrsid4531994  the dynamic programming algorithm.}{\insrsid7419342\charrsid10582236 
\par 
\par A local}{\insrsid10552690  RMS-like value is produced for the dynamic programming table cells by comparing five-residue fragments centered on}{\insrsid7419342\charrsid10582236  }{\insrsid10552690 positions being scored. I}{
\insrsid7419342\charrsid10582236 nter-atomic distances }{\insrsid15941723 are collected between the alpha-}{\insrsid7419342\charrsid10582236 
carbon atoms of all residues included in the region. The rms score is then taken from the square root of the average difference between analogous distances. }{\insrsid10552690 
\par 
\par }{\insrsid7419342\charrsid10582236 The shielding score is similar to a solvent accessibility score}{\insrsid15941723 . It}{\insrsid12600253  }{\insrsid15941723 considers}{\insrsid12600253  how many sidechains and alpha carbon atoms are visible to a }{
\insrsid15941723 given }{\insrsid12600253 sidechain, and how close they are}{\insrsid7419342\charrsid10582236 . }{\insrsid12600253 Highly shielded residues are not very accessible to the solvent environment. }{\insrsid7419342\charrsid10582236 
The effect of adding this term is to take advantage of the similar accessibility scores }{\insrsid12600253 anticipa}{\insrsid7419342\charrsid10582236 ted for equivalent residue pairs. The \'93mix\'94 option }{\insrsid12600253 is applied by default, where 
}{\insrsid7419342\charrsid10582236 the}{\insrsid12600253 se}{\insrsid7419342\charrsid10582236  rms and shielding terms }{\insrsid12600253 are combined }{\insrsid7419342\charrsid10582236 
with weights tuned by a genetic algorithm against a set of similar proteins.
\par 
\par }{\insrsid12600253 StructureAligner then }{\insrsid7419342\charrsid10582236 superimpose}{\insrsid12600253 s}{\insrsid7419342\charrsid10582236  }{\insrsid12600253 the pair of proteins using}{\insrsid7419342\charrsid10582236  equivalent pairs defined }{
\insrsid12600253 by }{\insrsid7419342\charrsid10582236 the}{\insrsid12600253  non-gap aligned segments. The superimposition}{\insrsid7419342\charrsid10582236  is taken through three filtering steps}{\insrsid15941723 
 where equivalent pairs are removed from consideration, and the superimposition is reapplied}{\insrsid12600253 . }{\insrsid15941723 
Equivalent pairs are removed if they are more than a certain distance from each other after superimposition. This helps to remove erroneous pairings and significa
ntly improves alignment quality. The distance thresholds 5.0, 4.0, and 3.0 angstroms are applied at each successive stage}{\insrsid7419342\charrsid10582236 
. Rms scores are reported for the initial alignment as well as after each filtering stage. The transformation matrix from the}{\insrsid15941723  superimposition of the}{\insrsid7419342\charrsid10582236  }{\insrsid15941723 final}{
\insrsid7419342\charrsid10582236  set of equivalent atoms is then used to report an additional rms score for the fit between the original set of non-gapped equivalent residues.}{\insrsid15941723 
 This value can be pessimistic, as the dynamic programming algorithm does not seek to reduce t
he number of equivalent pairs, so erroneous pairs can be expected in a superimposition of any significant complexity. The algorithm fails if it does not find more than five equivalent pairs for producing the final superimposition.}{
\insrsid7419342\charrsid10582236 
\par 
\par To reuse the dynamic pro
gramming algorithm implemented in the Aligner base class, five functions are available for overloading, only one of which is mandatory. The score() function is called in the dynamic programming algorithm code (align()in Aligner.py). The base class score()
 
simply returns a null value, so this function must be called by an inherited class, as in SequenceAligner.py. score() always receives the arguments r and m. These are indices to the .residues feature of polymer objects. The are used in score() to gather v
a
lues for comparison in this scoring function, for instance amino acid type or shielding, as above. The __init__() function may be overloaded as in SequenceAligner to produce a scoring matrix for use in the score() function. The _prepare_polymer() function
 
is called in add_target() and add_template() to apply similar code to each polymer as it is registered with the Aligner child class. It is overloaded in StructureAligner to generate its distance lists. The base class align() function produces no analysis 
or report, these should be implemented in a child class function that calls the parent align() function, then analyzes the results, as in each of the example children classes.
\par }{\insrsid10582236 
\par }}